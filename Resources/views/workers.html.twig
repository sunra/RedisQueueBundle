{%set menu = "in_workers" %}
{% extends "SunraRedisQueueBundle::layout.html.twig" %}

      {% block content %}
      
      
          {%verbatim%}
          
          
          
              <div ng-controller="RedisQueueWorkersCtrl">   
              
                                    
                  <div title="Connected to backend" ng-show="autoUpdateEnabled" class="progress progress-striped active" id="connect_indicator">
                      <div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="45" aria-valuemin="0" aria-valuemax="100" style="width: 100%"></div>
                  </div>
                          

                  <div ng-show="svState.config_changed" class="alert alert-warning"><strong>Configuration is changed</strong>! Restart supervisor to changes take effect.</div>
                  
                  
                  <div ng-show="State.error.has" class="alert alert-danger"><strong>Server error {{State.error.status}}</strong>!  <a type="button" class="btn btn-default" href="{{State.error.url}}" target="_blank">Details</a></div>
              
                  
                  
                  
                  <p></p>


                  <div ng-repeat="(worker_name, worker) in State">                      
                      
                      <h3>{{worker_name}}</h3>
                      
                      <div ng-repeat="(worker_id, worker_state) in worker">
                                                
                          
                          <div class="panel" ng-class="{'panel-success':worker_state.active,'panel-danger':!worker_state.active};" >
                            <!-- Default panel contents -->
                            <div class="panel-heading">{{worker_name}} {{worker_id}} is {{worker_state.state_text}}</div>
                                  
                            
                          
                                <!-- Table -->
                                <table class="table table-striped">
                    
                                  <tr ng-repeat="(key, value) in  worker_state.fields">
                                      <td>{{key}}</td>
                                      <td>{{value}}</td>
                                  </tr>              
                                  
                                </table>
                              </div> <!--panel-supervisor-->
                          
                          
                          
                          
                      </div>
                  </div>
                  

              
              
              </div>

          {%endverbatim%}
          
          
      
    {% endblock %}

    
    {% block before_bodyend_script %}
    
        <script>		    

			var RedisQueueApp = angular.module('RedisQueueApp', []);
						
			
			RedisQueueApp.controller('RedisQueueWorkersCtrl', ['$scope', '$interval', '$http', '$element', '$window','$sce', function ($scope, $interval, $http, $element, $window, $sce) {
				$scope.svState = {state_active:'-', 'active':false};
				$scope.autoUpdateEnabled = true;
			
				$scope.detectWindowNonActive = function () {
					var w = angular.element($window);
					w.bind('focus', function(e){
				        $scope.autoUpdateEnabled = true;						
					})
					w.bind('blur', function(e){
				        $scope.autoUpdateEnabled = false;
					})
				
				}
							
				$scope.loadData = function () {
					//console.log('loadSupervData');
					if (!$scope.autoUpdateEnabled) return;
					
					
					$http.get('{{path("sunra_redis_queue_workers_state")}}')
					    .success(

							 function(data){								
								$scope.State = data.state;
								$scope.workers_norm = data.workers_norm;							
								//console.log('loaded', $scope.svState);
								
								if($scope.stateChange) {
									if ($scope.svState.state_text != $scope.LastState) {
										$scope.stateChange = false;
										$('#sv_stop_btn').button('reset');
										$('#sv_start_btn').button('reset');
									}
								}
							 }						
					    ).
						error(function(data, status, headers, config) {
							
							$scope.State = {error : {has: true,status: status, data: data, url: '{{path("sunra_redis_queue_workers_state")}}'}};
								
							//$scope.worker_error = $sce.trustAsHtml(data);
							
							//console.log(data, status, headers, config);
						  // called asynchronously if an error occurs
						  // or server returns response with an error status.
						})					
				}
				
				
				$scope.svStart = function (){
					$scope.stateChange = true;
					$scope.LastState = $scope.svState.state_text;
					
					$('#sv_start_btn').button('loading');
					
					$http.get('{{path("sunra_redis_queue_supervisor_start")}}')
					    .success(
							 function(data){					
							    //$scope.svState.stateChange = false;			
								//console.log('started', data);
							 }						
					    );					
				}
				
				
                $scope.svStop = function (){
					$scope.stateChange = true;
					$scope.LastState = $scope.svState.state_text;
					$('#sv_stop_btn').button('loading');
					
					$http.get('{{path("sunra_redis_queue_supervisor_stop")}}')
					    .success(
							 function(data){
								//$scope.svState.stateChange	= false;
								//console.log('stopped', data);
							 }						
					    );					
				}				
				
				
				$interval(function(){
				    $scope.loadData();
				}, 3000);	
				
				$scope.detectWindowNonActive();
				$scope.loadData();		

            }]);	
			
        </script>
    
    {% endblock %} 
